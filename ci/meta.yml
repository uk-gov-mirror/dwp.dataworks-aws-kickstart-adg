meta:
  plan:
    terraform-common-config:
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.terraform_repository))
            tag: ((dataworks.terraform_version))
        params:
          TF_INPUT: false
          TF_CLI_ARGS_apply: -lock-timeout=300s
          TF_CLI_ARGS_plan: -lock-timeout=300s
          TF_VAR_costcode: ((dataworks.costcode))

    terraform-bootstrap:
      task: terraform-bootstrap
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            version: 0.0.19
            tag: 0.0.19
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              cp terraform.tf ../terraform-bootstrap
          dir: dataworks-aws-kickstart-adg
        inputs:
          - name: dataworks-aws-kickstart-adg
        outputs:
          - name: terraform-bootstrap
      params:
        AWS_REGION: eu-west-2

    terraform-apply:
      task: terraform-apply
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              export TF_VAR_emr_ami_id=$(cat ../al2-emr-ami/id)
              export TF_VAR_emr_launcher_zip="{base_path = \"../emr-launcher-release\", version = \"$(cat ../emr-launcher-release/version)\"}"
              cp ../terraform-bootstrap/terraform.tf .
              terraform workspace show
              terraform init
              terraform plan -out terraform.plan
              terraform apply -auto-approve terraform.plan
          dir: dataworks-aws-kickstart-adg
        inputs:
          - name: dataworks-aws-kickstart-adg
          - name: terraform-bootstrap
          - name: al2-emr-ami
          - name: emr-launcher-release

    terraform-plan:
      task: terraform-plan
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              export TF_VAR_emr_ami_id=$(cat ../al2-emr-ami/id)
              export TF_VAR_emr_launcher_zip="{base_path = \"../emr-launcher-release\", version = \"$(cat ../emr-launcher-release/version)\"}"
              cp ../terraform-bootstrap/terraform.tf .
              terraform workspace show
              terraform init
              terraform plan $DETAILED_EXITCODE
          dir: dataworks-aws-kickstart-adg
        inputs:
          - name: dataworks-aws-kickstart-adg
          - name: terraform-bootstrap
          - name: al2-emr-ami
          - name: emr-launcher-release
        params:
          DETAILED_EXITCODE: -detailed-exitcode

    start-cluster:
      task: start-cluster
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.management)):role/ci
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              source /assume-role
              set +x
              export topic_arn=arn:aws:sns:${AWS_DEFAULT_REGION}:${AWS_ACC}:trigger_kickstart_adg_process
              export message_json=$(cat <<EOF
              {
                "additional_step_args": {
                    "submit-job": ["--correlation_id", "$CORRELATION_ID", "--job_name", "$JOB_NAME", "--module_name", "$MODULE_NAME", "--start_dt", "$START_DT", "--end_dt", "$END_DT", "--clean_up_flg", "$CLEAN_UP_FLG"]
              }
              }
              EOF
              )
              echo $message_json
              aws sns publish --topic-arn "$topic_arn" --message "$message_json"

    start-cluster-dev:
      task: start-cluster
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.management)):role/ci
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              source /assume-role
              set +x
              export topic_arn=arn:aws:sns:${AWS_DEFAULT_REGION}:${AWS_ACC}:trigger_kickstart_adg_process
              export message_json=$(cat <<EOF
              {
                "additional_step_args": {
                    "submit-job-vacancy": ["--module_name", "vacancy", "--start_dt", "$START_DT", "--end_dt", "$END_DT", "--clean_up_flg", "$CLEAN_UP_FLG", "--e2e_test_flg", "$E2E_TEST_FLG"],
                    "submit-job-application": ["--module_name", "application", "--start_dt", "$START_DT", "--end_dt", "$END_DT", "--clean_up_flg", "$CLEAN_UP_FLG", "--e2e_test_flg", "$E2E_TEST_FLG"],
                    "submit-job-payment": ["--module_name", "payment", "--start_dt", "$START_DT", "--end_dt", "$END_DT", "--clean_up_flg", "$CLEAN_UP_FLG", "--e2e_test_flg", "$E2E_TEST_FLG"]
                }
              }
              EOF
              )
              echo $message_json
              aws sns publish --topic-arn "$topic_arn" --message "$message_json"

    stop-cluster:
      task: stop-cluster
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_awscli_repository))
            version: ((dataworks.docker_awscli_version))
            tag: ((dataworks.docker_awscli_version))
        params:
          AWS_ROLE_ARN: arn:aws:iam::((aws_account.management)):role/ci
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
        run:
          path: sh
          args:
            - -exc
            - |
              export AWS_DEFAULT_REGION
              source /assume-role
              set +x
              for CLUSTER_ID in $(aws emr list-clusters --active | jq -r '.Clusters[] | select(.Name | test("kickstart-adg")) | .Id');
              do
              aws emr terminate-clusters --cluster-ids $CLUSTER_ID
              done

    run-e2e-tests:
      task: run-e2e-tests
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_python_boto_behave_repository))
            tag: ((dataworks.docker_python_boto_behave_version))
        params:
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          E2E_TEST_TIMEOUT: 7200
          E2E_FEATURE_TAG_FILTER: "aws-kickstart-adg"
          ASSUME_DURATION: 10800
        run:
          dir: dataworks-behavioural-framework
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              set +x
              export E2E_FEATURE_TAG_FILTER="@${E2E_FEATURE_TAG_FILTER}"
              cd src/runners
              ./run-ci.sh \
              "../../../meta"
        inputs:
          - name: dataworks-behavioural-framework
          - name: meta

    generate-test-data:
      task: generate-test-data
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_python_boto_behave_repository))
            tag: ((dataworks.docker_python_boto_behave_version))
        params:
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          E2E_TEST_TIMEOUT: 7200
          E2E_FEATURE_TAG_FILTER: "aws-kickstart-adg-data-generator"
          ASSUME_DURATION: 10800
        run:
          dir: dataworks-behavioural-framework
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              set +x
              export E2E_FEATURE_TAG_FILTER="@${E2E_FEATURE_TAG_FILTER}"
              cd src/runners
              ./run-ci.sh \
              "../../../meta"
        inputs:
          - name: dataworks-behavioural-framework
          - name: meta

    terraform-bootstrap-new:
      task: terraform-bootstrap
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: dwpdigital/jinja-yaml-aws
            version: 0.0.19
            tag: 0.0.19
        run:
          path: sh
          args:
            - -exc
            - |
              python bootstrap_terraform.py
              cp terraform.tf ../terraform-bootstrap
          dir: dataworks-aws-kickstart-adg-new
        inputs:
          - name: dataworks-aws-kickstart-adg-new
        outputs:
          - name: terraform-bootstrap
      params:
        AWS_REGION: eu-west-2

    terraform-apply-new:
      task: terraform-apply
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              export TF_VAR_emr_ami_id=$(cat ../al2-emr-ami/id)
              export TF_VAR_emr_launcher_zip="{base_path = \"../emr-launcher-release\", version = \"$(cat ../emr-launcher-release/version)\"}"
              cp ../terraform-bootstrap/terraform.tf .
              terraform workspace show
              terraform init
              terraform plan -out terraform.plan
              terraform apply -auto-approve terraform.plan
          dir: dataworks-aws-kickstart-adg-new
        inputs:
          - name: dataworks-aws-kickstart-adg-new
          - name: terraform-bootstrap
          - name: al2-emr-ami
          - name: emr-launcher-release

    terraform-plan-new:
      task: terraform-plan
      .: (( inject meta.plan.terraform-common-config ))
      config:
        run:
          path: sh
          args:
            - -exc
            - |
              export TF_VAR_emr_ami_id=$(cat ../al2-emr-ami/id)
              export TF_VAR_emr_launcher_zip="{base_path = \"../emr-launcher-release\", version = \"$(cat ../emr-launcher-release/version)\"}"
              cp ../terraform-bootstrap/terraform.tf .
              terraform workspace show
              terraform init
              terraform plan $DETAILED_EXITCODE
          dir: dataworks-aws-kickstart-adg-new
        inputs:
          - name: dataworks-aws-kickstart-adg-new
          - name: terraform-bootstrap
          - name: al2-emr-ami
          - name: emr-launcher-release
        params:
          DETAILED_EXITCODE: -detailed-exitcode

    run-e2e-tests-new:
      task: run-e2e-tests-new
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((dataworks.docker_python_boto_behave_repository))
            tag: ((dataworks.docker_python_boto_behave_version))
        params:
          AWS_REGION: ((dataworks.aws_region))
          AWS_DEFAULT_REGION: ((dataworks.aws_region))
          E2E_TEST_TIMEOUT: 7200
          E2E_FEATURE_TAG_FILTER: "aws-kickstart-adg"
          ASSUME_DURATION: 10800
        run:
          dir: dataworks-behavioural-framework-new
          path: sh
          args:
            - -exc
            - |
              source /assume-role
              set +x
              export E2E_FEATURE_TAG_FILTER="@${E2E_FEATURE_TAG_FILTER}"
              cd src/runners
              ./run-ci.sh \
              "../../../meta"
        inputs:
          - name: dataworks-behavioural-framework-new
          - name: meta
